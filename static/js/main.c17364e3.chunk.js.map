{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","id","placeholder","Weather","city","country","temperature","humidity","description","error","App","state","undefined","icon","_callee","e","api_call","response","regenerator_default","wrap","_context","prev","next","preventDefault","document","getElementById","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c17364e3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Titles= () => (\n  <div>\n  <h1 className='title-container__title'>Weather App</h1>\n  <p className='title-container__subtitle'>Check temperature, conditions and more</p>\n</div>\n)\n\nexport default Titles;","import React from 'react';\n\nconst Form = props => (\n    <form onSubmit={props.getWeather}>\n          <input type='text' name='city' id='city' placeholder='City...'></input>\n          <input type='text' name='country' id='country' placeholder='Country...'></input>\n          <button>Get Weather</button>\n      </form>\n);\n\n\n\nexport default Form;","import React from 'react';\n\nconst Weather = props => (\n      <div className='weather__info'>\n        {props.city && props.country && <p className='weather__key'>Location: <span className='weather__value'>{props.city}, {props.country}</span></p>}\n        {props.temperature && <p className='weather__key'>Temperature: <span className='weather__value'>{props.temperature}&deg;C</span></p>}\n        {props.humidity && <p className='weather__key'>Humidity: <span className='weather__value'>{props.humidity}%</span></p>}\n        {props.description && <p className='weather__key'>Conditions: <span className='weather__value'>{props.description}</span></p>}\n        {props.error && <p className='weather__key'><span className='weather__value'>{props.error}</span></p>}\n      </div>\n    );\n\nexport default Weather;","import React from 'react';\n\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\n//const API_KEY = '5bab540ae4737564cd20b82f2236e49c';\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: undefined,\n    error: undefined\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n    const city = document.getElementById('city').value;\n    const country = document.getElementById('country').value;\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=5bab540ae4737564cd20b82f2236e49c&units=metric`\n    );\n    const response = await api_call.json();\n    if (city && country) {\n      console.log(response);\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: ''\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter the values.'\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"title-container\">\n              <Titles />\n            </div>\n            <div className=\"form-container\">\n              <Form getWeather={this.getWeather} />\n              <Weather\n                temperature={this.state.temperature}\n                humidity={this.state.humidity}\n                city={this.state.city}\n                country={this.state.country}\n                description={this.state.description}\n                error={this.state.error}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}